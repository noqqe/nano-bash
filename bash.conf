#!/bin/bash 

### Configuration
# Some of my configurations stuff here... 
GIT_DIRTY='*'
GIT_CLEAN=''
NANOBASH="$HOME/.nano-bash/"
PLUGINS="$NANOBASH/plugins"
EDITOR="vim"
PAGER="less"

### Plugins
# include handmade plugins in here
if [ -d $PLUGINS ]; then
    for x in $PLUGINS/*.bash
    do
        source $x 
    done
fi

### PROMPT
# Made a litte rip off from bash-it framework. 
# Prompt will automatically get branch name when in
# a repository

function parse_git_dirty {
  if [[ -n $(git status -s 2> /dev/null |grep -v ^# | grep -v "working directory clean" ) ]]; then
      echo -e "$GIT_DIRTY"
  else
    echo -e "$GIT_CLEAN"
  fi
}

# Make branch and dirty status in prompt
function git_prompt_info() {
  ref=$(git symbolic-ref HEAD 2> /dev/null) || return
  echo -e " (${ref#refs/heads/}$(parse_git_dirty))"
}

# For longer commands this is useful sometimes
miniprompt() {
        PS1='$ '
}

# Finally make prompt
PROMPT='\u@\h:\w$(git_prompt_info)$ ' 
PS1="${PROMPT}$(preexec_invoke_cmd)"


### Bash Completion 
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

_sshcomplete() {
    # parse all defined hosts from .ssh/config
    if [ -r $HOME/.ssh/config ]; then
        COMPREPLY=($(compgen -W "$(grep ^Host $HOME/.ssh/config | awk '{print $2}' )" -- ${COMP_WORDS[COMP_CWORD]}))
    fi
}
complete -o default -W "${SSH_COMPLETE[*]}" ssh

### Aliases 
# List directory contents                                                                                                                                                                                                                    
alias sl=ls                                                                                                                                                                                                                                  
alias ls='ls -G'        # Compact view, show colors                                                                                                                                                                                          
alias la='ls -AF'       # Compact view, show hidden                                                                                                                                                                                          
alias ll='ls -al'                                                                                                                                                                                                                            
alias l='ls -lah'                                                                                                                                                                                                                            
alias c='clear'                                                                                                                                                                                                                              
alias k='clear'                                                                                                                                                                                                                              
alias q="exit"                                                                                                                                                                                                                               
alias h='history'                                                                                                                                                                                                                            
                                                                                                                                                                                                                                             
alias editor="$EDITOR"                                                                                                                                                                                                                       
alias pager="$PAGER"                                                                                                                                                                                                                         
                                                                                                                                                                                                                                             
alias ..='cd ..'        # Go up one directory                                                                                                                                                                                                
alias ...='cd ../..'    # Go up two directories                                                                                                                                                                                              
alias -- -="cd -"       # Go back                                                                                                                                                                                                            
                                                                                                                                                                                                                                             
                                                                                                                                                                                                                                             
# Tree                                                                                                                                                                                                                                       
alias tree-bash="find . -print | sed -e 's;[^/]*/;|____;g;s;____|; |;g'"                                                                                                                                                                     
                                                                                                                                                                                                                                             
# Directory                                                                                                                                                                                                                                  
alias md='mkdir -p'                                                                                                                                                                                                                        
alias rd=rmdir                                                                                                                                                                                                                             
alias d='dirs -v'       

# lazyness ftw                                                                                                                                                                                                                               
alias ducks='du -cks * | sort -rn | head -11 '                                                                                                                                                                                               
alias xmod='chmod +x'                                                                                                                                                                                                                        
alias timestamp='date "+%Y%m%dT%H%M%S"'                                                                                                                                                                                                      
alias whereami='echo "$( hostname --fqdn ) ($(hostname -i)):$( pwd )"' # Complement to whoami command. 

### git
# Aliases
alias gcl='git clone'
alias ga='git add'
alias gall='git add .'
alias g='git'
alias get='git'
alias gst='git status'
alias gs='git status'
alias gss='git status -s'
alias gl='git log --oneline'
alias gup='git fetch && git rebase'
alias gp='git push'
alias gpo='git push origin '
alias gb='git branch'
alias gcount='git shortlog -sn'
alias gdel='git branch -D'
alias gcm='git commit -a -m'
alias gci='git commit -a -m'
alias gll='git log --graph --pretty=oneline --abbrev-commit'
alias cdiff='git diff --cached'

# Useful Functions
function git_remote {
  echo "Running: git remote add origin ${GIT_HOSTING}:$1.git"
  git remote add origin $GIT_HOSTING:$1.git
}

function git_remove_missing_files() {
  git ls-files -d -z | xargs -0 git update-index --remove
}

function git_info() {
    if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
        # print informations
        echo "git repo overview"
        echo -e "-----------------\n\n"

        # print all remotes and thier details
        for remote in $(git remote show); do
            echo $remote:  
            git remote show $remote
            echo
        done

        # print status of working repo
        echo "status:"
        if [ -n "$(git status -s 2> /dev/null)" ]; then
            git status -s
        else
            echo "working directory is clean"
        fi

        # print at least 5 last log entries
        echo -e "\nlog:"
        git log -5 --oneline
    fi
}

function git_stats {
# awesome work from https://github.com/esc/git-stats
# including some modifications

if [ -n "$(git symbolic-ref HEAD 2> /dev/null)" ]; then
    echo "Number of commits per author:"
    git --no-pager shortlog -sn --all
    AUTHORS=$( git shortlog -sn --all | cut -f2 | cut -f1 -d' ')
    LOGOPTS=""
    if [ "$1" == '-w' ]; then
        LOGOPTS="$LOGOPTS -w"
        shift
    fi
    if [ "$1" == '-M' ]; then
        LOGOPTS="$LOGOPTS -M"
        shift
    fi
    if [ "$1" == '-C' ]; then
        LOGOPTS="$LOGOPTS -C --find-copies-harder"
        shift
    fi
    for a in $AUTHORS
    do
        echo '-------------------'
        echo "Statistics for: $a"
        echo -n "Number of files changed: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f3 | sort -iu | wc -l
        echo -n "Number of lines added: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f1 | awk '{s+=$1} END {print s}'
        echo -n "Number of lines deleted: "
        git log $LOGOPTS --all --numstat --format="%n" --author=$a | cut -f2 | awk '{s+=$1} END {print s}'
        echo -n "Number of merges: "
        git log $LOGOPTS --all --merges --author=$a | grep -c '^commit'
    done
fi
}


### ruby
# Include rake environment
[[ -s "$HOME/.rvm/scripts/rvm" ]] && . "$HOME/.rvm/scripts/rvm" 

# Bash completion support for rake
export COMP_WORDBREAKS=${COMP_WORDBREAKS/\:/}
_rakecomplete() {
    if [ -f Rakefile ]; then
        recent=`ls -t .rake_tasks~ Rakefile **/*.rake 2> /dev/null | head -n 1`
        if [[ $recent != '.rake_tasks~' ]]; then
            rake --silent --tasks | cut -d " " -f 2 > .rake_tasks~
        fi
        COMPREPLY=($(compgen -W "`cat .rake_tasks~`" -- ${COMP_WORDS[COMP_CWORD]}))
        return 0
    fi
}
complete -o default -o nospace -F _rakecomplete rake


### History - made right. 
# history length 
HISTSIZE=10000
HISTFILESIZE=10000

# don't put duplicate lines in the history. See bash(1) for more options
# ... or force ignoredups and ignorespace
HISTCONTROL=ignoredups:ignorespace

# setting up timestamp for history
HISTTIMEFORMAT="%F %T "

# Reverse History
function rh {
  history | awk '{a[$4]++}END{for(i in a){print a[i] " " i}}' | sort -rn | head
}

# append to the history file, don't overwrite it
shopt -s histappend


